set nocompatible    " be iMproved, required for Vundle
"filetype off        " required for Vundle

" All of your Plugins must be added before the following line
"call vundle#end()            " required
"filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
"filetype plugin on
"
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line

set backspace=indent,eol,start  " Allow backspacing over everything in insert mode.

set history=200		            " keep 200 lines of command line history
set ruler		                " show the cursor position all the time
set showcmd		                " display incomplete commands
set wildmenu		            " display completion matches in a status line

set ttimeout		            " time out for key codes
set ttimeoutlen=100	            " wait up to 100ms after Esc for special key

" Doesn't work in older vims (<8.0)
" set display=truncate            " Show @@@ in the last line if it is truncated.

" Show a few lines of context around the cursor.  Note that this makes the
" text scroll if you mouse-click near the start or end of the window.
set scrolloff=5

" Do incremental searching when it's possible to timeout.
if has('reltime')
  set incsearch
endif

" Do not recognize octal numbers for Ctrl-A and Ctrl-X, most users find it
" confusing.
set nrformats-=octal

" Don't use Ex mode, use Q for formatting.
" Revert with ":unmap Q".
map Q gq

" CTRL-U in insert mode deletes a lot.  Use CTRL-G u to first break undo,
" so that you can undo CTRL-U after inserting a line break.
" Revert with ":iunmap <C-U>".
inoremap <C-U> <C-G>u<C-U>

" Switch syntax highlighting on when the terminal has colors or when using the
" GUI (which always has colors).
"if &t_Co > 2 || has("gui_running")
  " Revert with ":syntax off".
  syntax on
  " colorscheme distinguished
  " I like highlighting strings inside C comments.
  " Revert with ":unlet c_comment_strings".
let c_comment_strings=1
"endif

" Only do this part when compiled with support for autocommands.
if has("autocmd")
  " Enable file type detection.
  " Use the default filetype settings, so that mail gets 'tw' set to 72,
  " 'cindent' is on in C files, etc.
  " Also load indent files, to automatically do language-dependent indenting.
  " Revert with ":filetype off".
  " filetype plugin indent on

  " Put these in an autocmd group, so that you can revert them with:
  " ":augroup vimStartup | au! | augroup END"
  augroup vimStartup
    au!

    " When editing a file, always jump to the last known cursor position.
    " Don't do it when the position is invalid, when inside an event handler
    " (happens when dropping a file on gvim) and for a commit message (it's
    " likely a different one than last time).
    autocmd BufReadPost *
      \ if line("'\"") >= 1 && line("'\"") <= line("$") && &ft !~# 'commit'
      \ |   exe "normal! g`\""
      \ | endif

  augroup END
endif " has("autocmd")

" Convenient command to see the difference between the current buffer and the
" file it was loaded from, thus the changes you made.
" Only define it when not defined already.
" Revert with: ":delcommand DiffOrig".
if !exists(":DiffOrig")
  command DiffOrig vert new | set bt=nofile | r ++edit # | 0d_ | diffthis
		  \ | wincmd p | diffthis
endif

if has('langmap') && exists('+langremap')
  " Prevent that the langmap option applies to characters that result from a
  " mapping.  If set (default), this may break plugins (but it's backward
  " compatible).
  set nolangremap
endif

set secure
set autoread
set autowrite
set tabstop=4
set shiftwidth=4
set nobackup
set nohlsearch

" We just want autoindent!
set autoindent
set cinoptions=g0
set nocindent

set smarttab
set showmatch
set noexpandtab
set shiftround
set nowarn
set noerrorbells
set visualbell t_vb=
set browsedir=buffer
set ch=2 "get rid of 'Hit enter to continue messages'
set laststatus=2 "always display a status line
set noundofile
set mouse=a
set clipboard=unnamed
set number
set encoding=utf-8
"set hidden



" Kick vim into realizing 256 color terms.
if $TERM == "xterm-256color" || $TERM == "screen-256color" || $COLORTERM == "gnome-terminal"
    set t_Co=256
endif


" TODO: Add test for platform and select correct line.
"set wildignore+=*/tmp/*,*.so,*.swp,*.zip " MacOSX/Linux
set wildignore+=*\\tmp\\*,*.swp,*.zip,*.exe " Windows

"A
" Open corresponding header/src
map ,h :A<CR>


"Clang-Format
" use .clang-format file
let g:clang_format#detect_style_file = 1
" format the current buffer on save.
let g:clang_format#auto_format = 1
map <C-R><C-F> :ClangFormat<CR>
imap <C-R><C-F> :ClangFormat<CR>
"
"map <C-R><C-F> :pyf $HOME/vimfiles/python/clang-format.py<cr>
"imap <C-R><C-F>:pyf $HOME/vimfiles/python/clang-format.py<cr>

"Chromatica
" let g:chromatica#libclang_path=glob("~/.local/lib/llvm")
" let g:chromatica#enable_at_startup=1
" let g:chromatica#responsive_mode=1
" let g:chromatica#highlight_feature_level=1

"Airline
let g:airline_theme='papercolor'


let g:ctrlp_custom_ignore = {
  \ 'dir': '\v[\/]\.(git|hg|svn)$',
  \ 'file': '\v\.(exe|so|dll|o|d)$',
  \ 'link': 'SOME_BAD_SYMBOLIC_LINKS',
  \ }

let g:ctrlp_root_markers = ['meson.build']

"let g:ctrlp_user_command = 'find %s -type f'        " MacOSX/Linux
let g:ctrlp_user_command = 'dir %s /-n /b /s /a-d'  " Windows

"vim-localrc
let g:localrc_filename = 'vim.proj'

autocmd BufNewFile,BufRead meson.build setfiletype meson
autocmd BufNewFile,BufRead meson_options.txt set filetype=mesonopt
autocmd BufNewFile,BufRead *.rb,*.pp set ts=2 sw=2
autocmd BufNewFile,BufRead *.bdgcfg setfiletype dosini
autocmd BufNewFile,BufRead .gide,*.gide setfiletype yaml
autocmd BufNewFile,BufRead *.vcxproj,*.vcxproj.filters,*.sln setfiletype xml

"Emulate VisualStudio shift operations.
vmap <Tab> >gv
vmap <S-Tab> <gv

"Explore the directory of the current buffer.
let g:explSuffixesLast=0
map ,f :e <C-R>=expand("%:p:h")<CR>
"map <C-`> :e <C-R>=expand("%:p:h")<CR>

"Explore the current list of buffers.
let g:bufExplorerSortBy='mru'
let g:bufExplorerShowDirectories=0
map ,e :BufExplorer<CR>

"Check file out of perforce.
map ,c :!p4 edit %

"Diff vs. head version in perforce.
map ,d :!start p4 diff %

"Quick Advance in error buffer.
map ,n :cn<CR>

"Kill macro shit
map q <Nop>


set makeprg=mbuild

:let g:netrw_sort_sequence='[\/]$,[^\/]$,'

"au BufNewFile,BufRead *.h,*.hpp,*.c,*.cpp set tags=./tags,tags,/Users/bkusy/.vim/tags/usr/include/tags
"au BufNewFile,BufRead *.xsc			setf lua
"au BufNewFile,BufRead *.rgw,*.rgp,*.rgx setf yaml

