set nocompatible    " be iMproved, required for Vundle
filetype off        " required for Vundle

" Set the runtime path to include Vundle and initialize.
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

Plugin 'rhysd/vim-clang-format'
Plugin 'jlanzarotta/bufexplorer'
Plugin 'kien/ctrlp.vim'
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
"Plugin 'rodjek/vim-puppet'
Plugin 'flazz/vim-colorschemes'
Plugin 'vim-scripts/a.vim'

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
"filetype plugin on
"
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line

set secure
set autoread
set autowrite
set tabstop=4
set shiftwidth=4
set nobackup
set nohlsearch
set autoindent
set smarttab
set showmatch
set expandtab
set shiftround
set nowarn
set noerrorbells
set visualbell t_vb=
set browsedir=buffer
set ch=2 "get rid of 'Hit enter to continue messages'
set cinoptions=g0
set cindent
set laststatus=2 "always display a status line
set noundofile
set mouse=
set clipboard=unnamed
set number

" Kick vim into realizing 256 color terms.
if $TERM == "xterm-256color" || $TERM == "screen-256color" || $COLORTERM == "gnome-terminal"
    set t_Co=256
endif


" TODO: Add test for platform and select correct line.
"set wildignore+=*/tmp/*,*.so,*.swp,*.zip " MacOSX/Linux
set wildignore+=*\\tmp\\*,*.swp,*.zip,*.exe " Windows

"A
" Open corresponding header/src
map ,h :A<CR>


"Clang-Format
" use .clang-format file
let g:clang_format#detect_style_file = 1
" format the current buffer on save.
let g:clang_format#auto_format = 1
"map <C-R><C-F> :ClangFormat<CR>
"imap <C-R><C-F> :ClangFormat<CR>

"Chromatica
" let g:chromatica#libclang_path=glob("~/.local/lib/llvm")
" let g:chromatica#enable_at_startup=1
" let g:chromatica#responsive_mode=1
" let g:chromatica#highlight_feature_level=1

"Airline
let g:airline_theme='papercolor'


let g:ctrlp_custom_ignore = {
  \ 'dir': '\v[\/]\.(git|hg|svn)$',
  \ 'file': '\v\.(exe|so|dll|o|d)$',
  \ 'link': 'SOME_BAD_SYMBOLIC_LINKS',
  \ }

let g:ctrlp_root_markers = ['meson.build']

"let g:ctrlp_user_command = 'find %s -type f'        " MacOSX/Linux
let g:ctrlp_user_command = 'dir %s /-n /b /s /a-d'  " Windows

autocmd BufRead,BufNewFile meson.build setfiletype meson
autocmd BufRead,BufNewFile meson_options.txt set filetype=mesonopt

"Emulate VisualStudio shift operations.
vmap <Tab> >gv
vmap <S-Tab> <gv

"Explore the directory of the current buffer.
let g:explSuffixesLast=0
map ,f :e <C-R>=expand("%:p:h")<CR>
"map <C-`> :e <C-R>=expand("%:p:h")<CR>

"Explore the current list of buffers.
let g:bufExplorerSortBy='mru'
map ,e :BufExplorer<CR>

"Check file out of perforce.
map ,c :!p4 edit %

"Diff vs. head version in perforce.
map ,d :!start p4 diff %

"Quick Advance in error buffer.
map ,n :cn<CR>

"Kill macro shit
map q <Nop>


set makeprg=mbuild
"map ,m :!make 2>_mkerrors<CR>:cf _mkerrors<CR>

:let g:netrw_sort_sequence='[\/]$,[^\/]$,'

"au BufNewFile,BufRead *.h,*.hpp,*.c,*.cpp set tags=./tags,tags,/Users/bkusy/.vim/tags/usr/include/tags
"au BufNewFile,BufRead *.xsc			setf lua
"au BufNewFile,BufRead *.rgw,*.rgp,*.rgx setf yaml
au BufNewFile,BufRead *.h,*.hpp,*.cpp,*.c set ts=2 sw=2
au BufNewFile,BufRead *.rb,*.pp, set ts=2 sw=2

augroup Binary
    au!
    au BufReadPre *.m4[ap] let &bin=1
    au BufReadPost *.m4[ap] if &bin | %!xxd
    au BufReadPost *.m4[ap] set ft=xxd | endif
    au BufWritePre *.m4[ap] if &bin | %!xxd -r
    au BufWritePre *.m4[ap] if endif
    au BufWritePost *.m4[ap] if &bin | %!xxd
    au BufWritePost *.m4[ap] set nomod | endif
augroup END
